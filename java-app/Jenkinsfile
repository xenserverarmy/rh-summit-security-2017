node( 'maven' ) {

    stage('checkout'){
        checkout scm
    }

    stage('Build image'){
        login()
        sh """
            cd java-app
            mkdir -p s2i/deployments
            mvn package dependency:copy-dependencies -Popenshift -DskipTests -e
            mv target/dependency/* s2i/deployments/.
            mv target/*.jar s2i/deployments/. 
            oc start-build java-app --from-dir=s2i --follow=true
        """
    }

   stage('Black Duck Scan'){
       login()
       sh """
           IMAGE_NAME=\$(oc get istag java-app:latest --template='{{ .image.metadata.name }}')
           COUNTER=0
           DELAY=10
           MAX_COUNTER=50
           echo "Waiting for Black Duck Hub scan results"
           set +e
           while [ \$COUNTER -lt \$MAX_COUNTER ]
           do
             echo "Checking image"
             oc get image \$IMAGE_NAME --template="{{.metadata.labels}}" | grep com.blackducksoftware.image.has-vulnerabilities >/dev/null 2>&1
             if [ \$? -eq 0 ]; then
                 echo "Scan Completed"
                 break
             fi
             if [ \$COUNTER -lt \$MAX_COUNTER ]; then
                 echo -n "."
                 COUNTER=\$(( \$COUNTER + 1 ))
             fi
             if [ \$COUNTER -eq \$MAX_COUNTER ]; then
                  echo "Max time checking for scan completed."
                  exit 1
             fi
             sleep \$DELAY
            done
            sleep 5
           set -e
       """

   }

    stage('Validate scan results'){
	sh """
            IMAGE_NAME=\$(oc get istag java-app:latest --template='{{ .image.metadata.name }}')
            set +e
            oc get image \$IMAGE_NAME -o yaml | grep com.blackducksoftware.image.has-vulnerabilities | grep true >/dev/null 2>&1
            if [ \$? -eq 0 ]; then
                 echo 'true' > java_app_temp
            else
	         echo 'false' > java_app_temp
            fi
        """
        deny = readFile 'java_app_temp'
        if( deny.trim() == "true" ){
		    input "Image has been marked as having a Black Duck policy violation. Do you wish to proceed anyway?"
	}

    }

  stage('Deploy for QA') {
     input 'Promote to QA?'
  }

}


def login() {
    sh """
       set +x
       oc login --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) https://kubernetes.default.svc.cluster.local >/dev/null 2>&1 || echo 'OpenShift login failed'
       """
}






